package com.example.LT_Web2.services.impl;

import com.example.LT_Web2.dto.request.ReservationRequest;
import com.example.LT_Web2.entity.*;
import com.example.LT_Web2.exception.BusinessException;
import com.example.LT_Web2.exception.ResourceNotFoundException;
import com.example.LT_Web2.repository.ReservationRepository;
import com.example.LT_Web2.repository.TableRepository;
import com.example.LT_Web2.repository.UserRepository;
import com.example.LT_Web2.services.ReservationService;
import com.example.LT_Web2.services.TableService;
import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
@Transactional
public class ReservationServiceImpl implements ReservationService {

    private final ReservationRepository reservationRepository;
    private final TableService tableService;
    private final TableRepository tableRepository;
    private final UserRepository userRepository; // ‚Üê Th√™m d√≤ng n√†y

    @Override
    public Reservation createReservation(ReservationRequest request, Long customerId) {
        System.out.println("üîî [Reservation] Creating reservation...");
        System.out.println("   Table ID: " + request.getTableId());
        System.out.println("   Customer ID: " + customerId);
        System.out.println("   Reservation Time: " + request.getReservationTime());
        System.out.println("   Note: " + request.getNote());

        // 1. Ki·ªÉm tra th·ªùi gian
        if (request.getReservationTime().isBefore(LocalDateTime.now())) {
            System.err.println("‚ùå [Reservation] Time is in the past");
            throw new BusinessException("Th·ªùi gian ƒë·∫∑t b√†n ph·∫£i l·ªõn h∆°n th·ªùi gian hi·ªán t·∫°i");
        }

        // 2. Load Table v√† User
        Tables table = tableRepository.findById(request.getTableId())
                .orElseThrow(() -> {
                    System.err.println("‚ùå [Reservation] Table not found: " + request.getTableId());
                    return new ResourceNotFoundException("B√†n kh√¥ng t·ªìn t·∫°i");
                });

        User customer = userRepository.findById(customerId)
                .orElseThrow(() -> {
                    System.err.println("‚ùå [Reservation] Customer not found: " + customerId);
                    return new ResourceNotFoundException("Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i");
                });

        System.out.println("‚úÖ [Reservation] Table found: " + table.getName() + " (status: " + table.getStatus() + ")");
        System.out.println("‚úÖ [Reservation] Customer found: " + customer.getName());

        // 3. Ki·ªÉm tra b√†n c√≥ s·∫µn kh√¥ng
        if (table.getStatus() != TableStatus.AVAILABLE) {
            System.err.println("‚ùå [Reservation] Table is not available: " + table.getStatus());
            throw new BusinessException("B√†n n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ ƒë·∫∑t tr∆∞·ªõc");
        }

        // 4. T·∫°o reservation
        Reservation reservation = new Reservation();
        reservation.setTable(table);
        reservation.setCustomer(customer);
        reservation.setReservationTime(request.getReservationTime());
        reservation.setNote(request.getNote());
        reservation.setStatus(ReservationStatus.PENDING);

        Reservation saved = reservationRepository.save(reservation);
        System.out.println("‚úÖ [Reservation] Reservation created successfully: #" + saved.getId());

        // 5. ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n sang RESERVED ngay l·∫≠p t·ª©c
        tableService.updateStatus(table.getId(), TableStatus.RESERVED);
        System.out.println("‚úÖ [Reservation] Table #" + table.getId() + " updated to RESERVED");

        return saved;
    }

    @Override
    public Reservation confirmReservation(Long id) {
        Reservation reservation = reservationRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n"));

        if (reservation.getStatus() != ReservationStatus.PENDING) {
            throw new BusinessException("Ch·ªâ c√≥ th·ªÉ x√°c nh·∫≠n ƒë·∫∑t b√†n ·ªü tr·∫°ng th√°i 'Ch·ªù x√°c nh·∫≠n'");
        }

        // X√°c nh·∫≠n ‚Üí chuy·ªÉn b√†n sang RESERVED (ngay l·∫≠p t·ª©c ho·∫∑c khi g·∫ßn ƒë·∫øn gi·ªù)
        reservation.setStatus(ReservationStatus.CONFIRMED);
        Reservation saved = reservationRepository.save(reservation);

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n ‚Üí RESERVED
        tableService.updateStatus(reservation.getTable().getId(), TableStatus.RESERVED);

        return saved;
    }

    @Override
    public Reservation cancelReservation(Long id) {
        Reservation reservation = reservationRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n"));

        if (reservation.getStatus() == ReservationStatus.CANCELLED) {
            throw new BusinessException("ƒê·∫∑t b√†n n√†y ƒë√£ b·ªã h·ªßy");
        }

        reservation.setStatus(ReservationStatus.CANCELLED);
        Reservation saved = reservationRepository.save(reservation);

        // N·∫øu b√†n ƒëang RESERVED ‚Üí tr·∫£ v·ªÅ AVAILABLE
        if (reservation.getTable().getStatus() == TableStatus.RESERVED) {
            tableService.updateStatus(reservation.getTable().getId(), TableStatus.AVAILABLE);
        }

        return saved;
    }

    @Override
    public List<Reservation> getAllReservations() {
        return reservationRepository.findAll();
    }

    @Override
    public List<Reservation> getReservationsByCustomer(Long customerId) {
        return reservationRepository.findByCustomerId(customerId);
    }

    // üïí X·ª≠ l√Ω No-show: ch·∫°y ƒë·ªãnh k·ª≥ (d√πng @Scheduled)
    @Override
    public void handleNoShowReservations() {
        LocalDateTime now = LocalDateTime.now();
        // T√¨m c√°c reservation ƒë√£ qu√° gi·ªù + ch∆∞a check-in
        List<Reservation> overdue = reservationRepository.findConfirmedOverdue(now);

        for (Reservation r : overdue) {
            // Chuy·ªÉn tr·∫°ng th√°i reservation ‚Üí NO_SHOW
            r.setStatus(ReservationStatus.NO_SHOW);
            reservationRepository.save(r);

            // Tr·∫£ b√†n v·ªÅ AVAILABLE
            if (r.getTable().getStatus() == TableStatus.RESERVED) {
                tableService.updateStatus(r.getTable().getId(), TableStatus.AVAILABLE);
            }
        }
    }

    @Component
    @RequiredArgsConstructor
    public class ReservationScheduler {
        private final ReservationService reservationService;

        @Scheduled(fixedRate = 90000)
        public void handleNoShow() {
            reservationService.handleNoShowReservations();
        }
    }
}
