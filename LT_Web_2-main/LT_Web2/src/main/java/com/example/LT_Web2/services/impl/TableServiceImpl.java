package com.example.LT_Web2.services.impl;
import com.example.LT_Web2.entity.Table;
import com.example.LT_Web2.entity.TableStatus;
import com.example.LT_Web2.exception.BusinessException;
import com.example.LT_Web2.exception.ResourceNotFoundException;
import com.example.LT_Web2.repository.TableRepository;
import com.example.LT_Web2.services.TableService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.List;
import java.util.Set;

@Service
@RequiredArgsConstructor
@Transactional
public class TableServiceImpl implements TableService {

    private final TableRepository tableRepository;

    // C√°c tr·∫°ng th√°i h·ª£p l·ªá c√≥ th·ªÉ chuy·ªÉn t·ª´ AVAILABLE
    private static final Set<TableStatus> FROM_AVAILABLE = Set.of(TableStatus.RESERVED, TableStatus.OCCUPIED);
    // T·ª´ RESERVED
    private static final Set<TableStatus> FROM_RESERVED = Set.of(TableStatus.OCCUPIED, TableStatus.AVAILABLE);
    // T·ª´ OCCUPIED
    private static final Set<TableStatus> FROM_OCCUPIED = Set.of(TableStatus.COMPLETED);
    // T·ª´ COMPLETED
    private static final Set<TableStatus> FROM_COMPLETED = Set.of(TableStatus.AVAILABLE);

    @Override
    public Table save(Table table) {
        if (table.getName() == null || table.getName().trim().isEmpty()) {
            throw new IllegalArgumentException("T√™n b√†n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }
        if (tableRepository.existsByName(table.getName())) {
            throw new BusinessException("ƒê√£ t·ªìn t·∫°i b√†n c√≥ t√™n: " + table.getName());
        }
        // M·∫∑c ƒë·ªãnh tr·∫°ng th√°i m·ªõi l√† AVAILABLE
        if (table.getStatus() == null) {
            table.setStatus(TableStatus.AVAILABLE);
        }
        return tableRepository.save(table);
    }

    @Override
    public List<Table> findByStatus(TableStatus status) {
        return tableRepository.findByStatus(status);
    }
    @Override
    public Table findById(Long id) {
        return tableRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: " + id));
    }

    @Override
    public List<Table> findAll() {
        return tableRepository.findAll();
    }

    @Override
    public void deleteById(Long id) {
        Table table = findById(id);
        if (table.getStatus() != TableStatus.AVAILABLE) {
            throw new BusinessException("Ch·ªâ c√≥ th·ªÉ x√≥a b√†n ƒëang ·ªü tr·∫°ng th√°i 'Tr·ªëng'");
        }
        tableRepository.deleteById(id);
    }

    @Override
    public Table updateStatus(Long id, TableStatus newStatus) {
        Table table = findById(id);
        TableStatus currentStatus = table.getStatus();

        // üîí Ki·ªÉm tra chuy·ªÉn tr·∫°ng th√°i h·ª£p l·ªá
        if (!isValidTransition(currentStatus, newStatus)) {
            throw new BusinessException(
                    String.format("Kh√¥ng th·ªÉ chuy·ªÉn b√†n t·ª´ tr·∫°ng th√°i '%s' sang '%s'",
                            currentStatus, newStatus)
            );
        }

        table.setStatus(newStatus);
        return tableRepository.save(table);
    }

    // ‚úÖ H√†m ki·ªÉm tra lu·ªìng tr·∫°ng th√°i h·ª£p l·ªá
    private boolean isValidTransition(TableStatus from, TableStatus to) {
        if (from == TableStatus.AVAILABLE) {
            return FROM_AVAILABLE.contains(to);
        } else if (from == TableStatus.RESERVED) {
            return FROM_RESERVED.contains(to);
        } else if (from == TableStatus.OCCUPIED) {
            return FROM_OCCUPIED.contains(to);
        } else if (from == TableStatus.COMPLETED) {
            return FROM_COMPLETED.contains(to);
        }
        return false;
    }

    // üí° (M·ªü r·ªông) Ph∆∞∆°ng th·ª©c ti·ªán √≠ch: l·∫•y t·∫•t c·∫£ b√†n tr·ªëng ho·∫∑c c√≥ th·ªÉ d√πng ngay
    public List<Table> getAvailableOrReservedTables() {
        return tableRepository.findByStatusIn(Arrays.asList(TableStatus.AVAILABLE, TableStatus.RESERVED));
    }
}